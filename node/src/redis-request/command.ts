// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ArgsOptions, unionToArgsOptions, unionListToArgsOptions } from '../redis-request/args-options.js';
import { RequestType } from '../redis-request/request-type.js';


export class Command {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Command {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCommand(bb:flatbuffers.ByteBuffer, obj?:Command):Command {
  return (obj || new Command()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCommand(bb:flatbuffers.ByteBuffer, obj?:Command):Command {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Command()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

requestType():RequestType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : RequestType.InvalidRequest;
}

argsType():ArgsOptions {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ArgsOptions.NONE;
}

args<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCommand(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRequestType(builder:flatbuffers.Builder, requestType:RequestType) {
  builder.addFieldInt32(0, requestType, RequestType.InvalidRequest);
}

static addArgsType(builder:flatbuffers.Builder, argsType:ArgsOptions) {
  builder.addFieldInt8(1, argsType, ArgsOptions.NONE);
}

static addArgs(builder:flatbuffers.Builder, argsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, argsOffset, 0);
}

static endCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // args
  return offset;
}

static createCommand(builder:flatbuffers.Builder, requestType:RequestType, argsType:ArgsOptions, argsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Command.startCommand(builder);
  Command.addRequestType(builder, requestType);
  Command.addArgsType(builder, argsType);
  Command.addArgs(builder, argsOffset);
  return Command.endCommand(builder);
}
}
