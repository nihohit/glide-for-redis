// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CommandOptions, unionToCommandOptions, unionListToCommandOptions } from '../redis-request/command-options.js';
import { Routes, unionToRoutes, unionListToRoutes } from '../redis-request/routes.js';


export class RedisRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RedisRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRedisRequest(bb:flatbuffers.ByteBuffer, obj?:RedisRequest):RedisRequest {
  return (obj || new RedisRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRedisRequest(bb:flatbuffers.ByteBuffer, obj?:RedisRequest):RedisRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RedisRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

callbackIdx():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

commandType():CommandOptions {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CommandOptions.NONE;
}

command<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

routeType():Routes {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Routes.NONE;
}

route<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startRedisRequest(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addCallbackIdx(builder:flatbuffers.Builder, callbackIdx:number) {
  builder.addFieldInt32(0, callbackIdx, 0);
}

static addCommandType(builder:flatbuffers.Builder, commandType:CommandOptions) {
  builder.addFieldInt8(1, commandType, CommandOptions.NONE);
}

static addCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, commandOffset, 0);
}

static addRouteType(builder:flatbuffers.Builder, routeType:Routes) {
  builder.addFieldInt8(3, routeType, Routes.NONE);
}

static addRoute(builder:flatbuffers.Builder, routeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, routeOffset, 0);
}

static endRedisRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // command
  return offset;
}

static createRedisRequest(builder:flatbuffers.Builder, callbackIdx:number, commandType:CommandOptions, commandOffset:flatbuffers.Offset, routeType:Routes, routeOffset:flatbuffers.Offset):flatbuffers.Offset {
  RedisRequest.startRedisRequest(builder);
  RedisRequest.addCallbackIdx(builder, callbackIdx);
  RedisRequest.addCommandType(builder, commandType);
  RedisRequest.addCommand(builder, commandOffset);
  RedisRequest.addRouteType(builder, routeType);
  RedisRequest.addRoute(builder, routeOffset);
  return RedisRequest.endRedisRequest(builder);
}
}
