// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SimpleRoutes } from '../redis-request/simple-routes.js';


export class SimpleRoutesTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SimpleRoutesTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSimpleRoutesTable(bb:flatbuffers.ByteBuffer, obj?:SimpleRoutesTable):SimpleRoutesTable {
  return (obj || new SimpleRoutesTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSimpleRoutesTable(bb:flatbuffers.ByteBuffer, obj?:SimpleRoutesTable):SimpleRoutesTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SimpleRoutesTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

route():SimpleRoutes {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : SimpleRoutes.AllNodes;
}

static startSimpleRoutesTable(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRoute(builder:flatbuffers.Builder, route:SimpleRoutes) {
  builder.addFieldInt32(0, route, SimpleRoutes.AllNodes);
}

static endSimpleRoutesTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSimpleRoutesTable(builder:flatbuffers.Builder, route:SimpleRoutes):flatbuffers.Offset {
  SimpleRoutesTable.startSimpleRoutesTable(builder);
  SimpleRoutesTable.addRoute(builder, route);
  return SimpleRoutesTable.endSimpleRoutesTable(builder);
}
}
