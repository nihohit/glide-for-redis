// automatically generated by the FlatBuffers compiler, do not modify

import { SimpleRoutesTable } from '../redis-request/simple-routes-table.js';
import { SlotIdRoute } from '../redis-request/slot-id-route.js';
import { SlotKeyRoute } from '../redis-request/slot-key-route.js';


export enum Routes {
  NONE = 0,
  SimpleRoutesTable = 1,
  SlotKeyRoute = 2,
  SlotIdRoute = 3
}

export function unionToRoutes(
  type: Routes,
  accessor: (obj:SimpleRoutesTable|SlotIdRoute|SlotKeyRoute) => SimpleRoutesTable|SlotIdRoute|SlotKeyRoute|null
): SimpleRoutesTable|SlotIdRoute|SlotKeyRoute|null {
  switch(Routes[type]) {
    case 'NONE': return null; 
    case 'SimpleRoutesTable': return accessor(new SimpleRoutesTable())! as SimpleRoutesTable;
    case 'SlotKeyRoute': return accessor(new SlotKeyRoute())! as SlotKeyRoute;
    case 'SlotIdRoute': return accessor(new SlotIdRoute())! as SlotIdRoute;
    default: return null;
  }
}

export function unionListToRoutes(
  type: Routes, 
  accessor: (index: number, obj:SimpleRoutesTable|SlotIdRoute|SlotKeyRoute) => SimpleRoutesTable|SlotIdRoute|SlotKeyRoute|null, 
  index: number
): SimpleRoutesTable|SlotIdRoute|SlotKeyRoute|null {
  switch(Routes[type]) {
    case 'NONE': return null; 
    case 'SimpleRoutesTable': return accessor(index, new SimpleRoutesTable())! as SimpleRoutesTable;
    case 'SlotKeyRoute': return accessor(index, new SlotKeyRoute())! as SlotKeyRoute;
    case 'SlotIdRoute': return accessor(index, new SlotIdRoute())! as SlotIdRoute;
    default: return null;
  }
}
