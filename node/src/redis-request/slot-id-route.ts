// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SlotTypes } from '../redis-request/slot-types.js';


export class SlotIdRoute {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SlotIdRoute {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSlotIdRoute(bb:flatbuffers.ByteBuffer, obj?:SlotIdRoute):SlotIdRoute {
  return (obj || new SlotIdRoute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSlotIdRoute(bb:flatbuffers.ByteBuffer, obj?:SlotIdRoute):SlotIdRoute {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SlotIdRoute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

slotType():SlotTypes {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : SlotTypes.Primary;
}

slotId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startSlotIdRoute(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSlotType(builder:flatbuffers.Builder, slotType:SlotTypes) {
  builder.addFieldInt32(0, slotType, SlotTypes.Primary);
}

static addSlotId(builder:flatbuffers.Builder, slotId:number) {
  builder.addFieldInt32(1, slotId, 0);
}

static endSlotIdRoute(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSlotIdRoute(builder:flatbuffers.Builder, slotType:SlotTypes, slotId:number):flatbuffers.Offset {
  SlotIdRoute.startSlotIdRoute(builder);
  SlotIdRoute.addSlotType(builder, slotType);
  SlotIdRoute.addSlotId(builder, slotId);
  return SlotIdRoute.endSlotIdRoute(builder);
}
}
