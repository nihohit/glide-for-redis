// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SlotTypes } from '../redis-request/slot-types.js';


export class SlotKeyRoute {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SlotKeyRoute {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSlotKeyRoute(bb:flatbuffers.ByteBuffer, obj?:SlotKeyRoute):SlotKeyRoute {
  return (obj || new SlotKeyRoute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSlotKeyRoute(bb:flatbuffers.ByteBuffer, obj?:SlotKeyRoute):SlotKeyRoute {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SlotKeyRoute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

slotType():SlotTypes {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : SlotTypes.Primary;
}

slotKey():string|null
slotKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
slotKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSlotKeyRoute(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSlotType(builder:flatbuffers.Builder, slotType:SlotTypes) {
  builder.addFieldInt32(0, slotType, SlotTypes.Primary);
}

static addSlotKey(builder:flatbuffers.Builder, slotKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, slotKeyOffset, 0);
}

static endSlotKeyRoute(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // slot_key
  return offset;
}

static createSlotKeyRoute(builder:flatbuffers.Builder, slotType:SlotTypes, slotKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  SlotKeyRoute.startSlotKeyRoute(builder);
  SlotKeyRoute.addSlotType(builder, slotType);
  SlotKeyRoute.addSlotKey(builder, slotKeyOffset);
  return SlotKeyRoute.endSlotKeyRoute(builder);
}
}
