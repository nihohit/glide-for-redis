// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class AuthenticationInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AuthenticationInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAuthenticationInfo(bb:flatbuffers.ByteBuffer, obj?:AuthenticationInfo):AuthenticationInfo {
  return (obj || new AuthenticationInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAuthenticationInfo(bb:flatbuffers.ByteBuffer, obj?:AuthenticationInfo):AuthenticationInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AuthenticationInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

password():string|null
password(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
password(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

username():string|null
username(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
username(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAuthenticationInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPassword(builder:flatbuffers.Builder, passwordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, passwordOffset, 0);
}

static addUsername(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, usernameOffset, 0);
}

static endAuthenticationInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // password
  return offset;
}

static createAuthenticationInfo(builder:flatbuffers.Builder, passwordOffset:flatbuffers.Offset, usernameOffset:flatbuffers.Offset):flatbuffers.Offset {
  AuthenticationInfo.startAuthenticationInfo(builder);
  AuthenticationInfo.addPassword(builder, passwordOffset);
  AuthenticationInfo.addUsername(builder, usernameOffset);
  return AuthenticationInfo.endAuthenticationInfo(builder);
}
}
