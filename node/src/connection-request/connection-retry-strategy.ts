// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ConnectionRetryStrategy {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConnectionRetryStrategy {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConnectionRetryStrategy(bb:flatbuffers.ByteBuffer, obj?:ConnectionRetryStrategy):ConnectionRetryStrategy {
  return (obj || new ConnectionRetryStrategy()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConnectionRetryStrategy(bb:flatbuffers.ByteBuffer, obj?:ConnectionRetryStrategy):ConnectionRetryStrategy {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConnectionRetryStrategy()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

numberOfRetries():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

factor():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

exponentBase():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startConnectionRetryStrategy(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addNumberOfRetries(builder:flatbuffers.Builder, numberOfRetries:number) {
  builder.addFieldInt32(0, numberOfRetries, 0);
}

static addFactor(builder:flatbuffers.Builder, factor:number) {
  builder.addFieldInt32(1, factor, 0);
}

static addExponentBase(builder:flatbuffers.Builder, exponentBase:number) {
  builder.addFieldInt32(2, exponentBase, 0);
}

static endConnectionRetryStrategy(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConnectionRetryStrategy(builder:flatbuffers.Builder, numberOfRetries:number, factor:number, exponentBase:number):flatbuffers.Offset {
  ConnectionRetryStrategy.startConnectionRetryStrategy(builder);
  ConnectionRetryStrategy.addNumberOfRetries(builder, numberOfRetries);
  ConnectionRetryStrategy.addFactor(builder, factor);
  ConnectionRetryStrategy.addExponentBase(builder, exponentBase);
  return ConnectionRetryStrategy.endConnectionRetryStrategy(builder);
}
}
