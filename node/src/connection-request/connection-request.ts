// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AddressInfo } from '../connection-request/address-info.js';
import { AuthenticationInfo } from '../connection-request/authentication-info.js';
import { ConnectionRetryStrategy } from '../connection-request/connection-retry-strategy.js';
import { ReadFrom } from '../connection-request/read-from.js';
import { TlsMode } from '../connection-request/tls-mode.js';


export class ConnectionRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConnectionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConnectionRequest(bb:flatbuffers.ByteBuffer, obj?:ConnectionRequest):ConnectionRequest {
  return (obj || new ConnectionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConnectionRequest(bb:flatbuffers.ByteBuffer, obj?:ConnectionRequest):ConnectionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConnectionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

addresses(index: number, obj?:AddressInfo):AddressInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new AddressInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

addressesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tlsMode():TlsMode {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : TlsMode.NoTls;
}

clusterModeEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

requestTimeout():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

clientCreationTimeout():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

readFrom():ReadFrom {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : ReadFrom.Primary;
}

connectionRetryStrategy(obj?:ConnectionRetryStrategy):ConnectionRetryStrategy|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ConnectionRetryStrategy()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

authenticationInfo(obj?:AuthenticationInfo):AuthenticationInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new AuthenticationInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

databaseId():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startConnectionRequest(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addAddresses(builder:flatbuffers.Builder, addressesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, addressesOffset, 0);
}

static createAddressesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAddressesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTlsMode(builder:flatbuffers.Builder, tlsMode:TlsMode) {
  builder.addFieldInt32(1, tlsMode, TlsMode.NoTls);
}

static addClusterModeEnabled(builder:flatbuffers.Builder, clusterModeEnabled:boolean) {
  builder.addFieldInt8(2, +clusterModeEnabled, +false);
}

static addRequestTimeout(builder:flatbuffers.Builder, requestTimeout:number) {
  builder.addFieldInt32(3, requestTimeout, 0);
}

static addClientCreationTimeout(builder:flatbuffers.Builder, clientCreationTimeout:number) {
  builder.addFieldInt32(4, clientCreationTimeout, 0);
}

static addReadFrom(builder:flatbuffers.Builder, readFrom:ReadFrom) {
  builder.addFieldInt32(5, readFrom, ReadFrom.Primary);
}

static addConnectionRetryStrategy(builder:flatbuffers.Builder, connectionRetryStrategyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, connectionRetryStrategyOffset, 0);
}

static addAuthenticationInfo(builder:flatbuffers.Builder, authenticationInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, authenticationInfoOffset, 0);
}

static addDatabaseId(builder:flatbuffers.Builder, databaseId:number) {
  builder.addFieldInt32(8, databaseId, 0);
}

static endConnectionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // addresses
  return offset;
}

}
