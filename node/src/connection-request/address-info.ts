// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class AddressInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AddressInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAddressInfo(bb:flatbuffers.ByteBuffer, obj?:AddressInfo):AddressInfo {
  return (obj || new AddressInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAddressInfo(bb:flatbuffers.ByteBuffer, obj?:AddressInfo):AddressInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AddressInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

host():string|null
host(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
host(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startAddressInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addHost(builder:flatbuffers.Builder, hostOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hostOffset, 0);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt32(1, port, 0);
}

static endAddressInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // host
  return offset;
}

static createAddressInfo(builder:flatbuffers.Builder, hostOffset:flatbuffers.Offset, port:number):flatbuffers.Offset {
  AddressInfo.startAddressInfo(builder);
  AddressInfo.addHost(builder, hostOffset);
  AddressInfo.addPort(builder, port);
  return AddressInfo.endAddressInfo(builder);
}
}
