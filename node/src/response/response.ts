// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ResponseValue, unionToResponseValue, unionListToResponseValue } from '../response/response-value.js';


export class Response {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Response {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponse(bb:flatbuffers.ByteBuffer, obj?:Response):Response {
  return (obj || new Response()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponse(bb:flatbuffers.ByteBuffer, obj?:Response):Response {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Response()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

callbackIdx():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

valueType():ResponseValue {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ResponseValue.NONE;
}

value<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCallbackIdx(builder:flatbuffers.Builder, callbackIdx:number) {
  builder.addFieldInt32(0, callbackIdx, 0);
}

static addValueType(builder:flatbuffers.Builder, valueType:ResponseValue) {
  builder.addFieldInt8(1, valueType, ResponseValue.NONE);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueOffset, 0);
}

static endResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // value
  return offset;
}

static createResponse(builder:flatbuffers.Builder, callbackIdx:number, valueType:ResponseValue, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  Response.startResponse(builder);
  Response.addCallbackIdx(builder, callbackIdx);
  Response.addValueType(builder, valueType);
  Response.addValue(builder, valueOffset);
  return Response.endResponse(builder);
}
}
