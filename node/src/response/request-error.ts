// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { RequestErrorType } from '../response/request-error-type.js';


export class RequestError {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestError {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestError(bb:flatbuffers.ByteBuffer, obj?:RequestError):RequestError {
  return (obj || new RequestError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestError(bb:flatbuffers.ByteBuffer, obj?:RequestError):RequestError {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestError()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():RequestErrorType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : RequestErrorType.Unspecified;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRequestError(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:RequestErrorType) {
  builder.addFieldInt32(0, type, RequestErrorType.Unspecified);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static endRequestError(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // message
  return offset;
}

static createRequestError(builder:flatbuffers.Builder, type:RequestErrorType, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  RequestError.startRequestError(builder);
  RequestError.addType(builder, type);
  RequestError.addMessage(builder, messageOffset);
  return RequestError.endRequestError(builder);
}
}
