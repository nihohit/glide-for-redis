// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ConstantResponse } from '../response/constant-response.js';


export class ConstantResponseTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConstantResponseTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConstantResponseTable(bb:flatbuffers.ByteBuffer, obj?:ConstantResponseTable):ConstantResponseTable {
  return (obj || new ConstantResponseTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConstantResponseTable(bb:flatbuffers.ByteBuffer, obj?:ConstantResponseTable):ConstantResponseTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConstantResponseTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

response():ConstantResponse {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : ConstantResponse.OK;
}

static startConstantResponseTable(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addResponse(builder:flatbuffers.Builder, response:ConstantResponse) {
  builder.addFieldInt32(0, response, ConstantResponse.OK);
}

static endConstantResponseTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConstantResponseTable(builder:flatbuffers.Builder, response:ConstantResponse):flatbuffers.Offset {
  ConstantResponseTable.startConstantResponseTable(builder);
  ConstantResponseTable.addResponse(builder, response);
  return ConstantResponseTable.endConstantResponseTable(builder);
}
}
