// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Pointer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Pointer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPointer(bb:flatbuffers.ByteBuffer, obj?:Pointer):Pointer {
  return (obj || new Pointer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPointer(bb:flatbuffers.ByteBuffer, obj?:Pointer):Pointer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Pointer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pointer():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startPointer(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPointer(builder:flatbuffers.Builder, pointer:bigint) {
  builder.addFieldInt64(0, pointer, BigInt('0'));
}

static endPointer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPointer(builder:flatbuffers.Builder, pointer:bigint):flatbuffers.Offset {
  Pointer.startPointer(builder);
  Pointer.addPointer(builder, pointer);
  return Pointer.endPointer(builder);
}
}
